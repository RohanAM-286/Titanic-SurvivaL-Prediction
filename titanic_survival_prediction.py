# -*- coding: utf-8 -*-
"""Titanic Survival Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NJ1I-KAtOjMBNBl-YJbSWX2OfSAAC-na
"""



import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import warnings
warnings.filterwarnings('ignore')

"""data collection"""

#load data from csv file to panda dataframe
titanic_data = pd.read_csv('/content/train.csv')

"""printing data"""

titanic_data.head()

"""#no of rows and  cols"""

titanic_data.shape

"""#getting some info about data"""

titanic_data.info()

"""missing values"""

titanic_data.isnull().sum()

"""#handling missing values

"""

#drop cabin column from data frame
titanic_data=titanic_data.drop(columns='Cabin',axis=1)

#replacing missing values in age with mean valie
titanic_data['Age'].fillna(titanic_data['Age'].mean(),inplace=True)

#finding mode value of "Embarked"col
print(titanic_data['Embarked'].mode())

print(titanic_data['Embarked'].mode()[0])

#replacing the missin values in embark col with mode value
titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0],inplace=True)

#check no of missing values in each c0l
titanic_data.isnull().sum()

#data analysis
#getting some stastical measured abt data
titanic_data.describe()

#finding the no fo people survived and those who didnt survive
titanic_data['Survived'].value_counts()

titanic_data['Sex'].value_counts()

#data visualization
sns.set()

#making a count plot for "Survived"column
sns.countplot(x='Survived', data=titanic_data)

#making a count plot for "Sex"column
sns.countplot(x='Sex', data=titanic_data)

sns.countplot(x='Sex', hue='Survived', data=titanic_data)
#no of survivors gender wise

sns.countplot(x='Pclass', data=titanic_data)

sns.countplot(x='Pclass', hue='Survived', data=titanic_data)
#no of survivors pclass

#converting categorical columns
#replacing male with 0 ,female with 1,and in emabarked , s with 0. c with 1 , q with 2 since computer understands better in form of 0's and 1s
titanic_data.replace({'Sex':{'male':0,'female':1},'Embarked':{'S':0,'C':1,'Q':2}},inplace=True)

titanic_data.head()

"""seperating features and target

"""

X=titanic_data.drop(columns=['PassengerId','Name','Ticket','Survived'],axis=1)
Y=titanic_data['Survived']

print(X)

print(Y)

"""splitting data into training and test data"""

X_train,X_test,  Y_train=train_test_split(  X,Y,test_size=0.2,random_state=2)

# splitting data into training and test data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model training

LOgistic regression
"""

model=LogisticRegression()

model.fit(X_train, Y_train)

#Accuracy on training data
X_train_prediction=model.predict(X_train)

print(X_train_prediction)

training_data_accuracy=accuracy_score(Y_train,X_train_prediction)
print('Accuracy score of training data :',training_data_accuracy)
#

#accuracy on test data
X_test_prediction=model.predict(X_test)

print(X_train_prediction)

#accuracy on test data
X_test_prediction=model.predict(X_test)

print(X_test_prediction)

test_data_accuracy=accuracy_score(Y_test,X_test_prediction)
print('Accuracy score of test data :',test_data_accuracy)
#